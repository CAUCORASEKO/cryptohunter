from binance.client import Client
from datetime import datetime, timedelta

# Load API key and secret from Secrets.py
from Secrets import API_KEY, API_SECRET

# Create a Binance Client instance
client = Client(API_KEY, API_SECRET)

# Get information on all futures symbols
futures_exchange_info = client.futures_exchange_info()

# Create a list to store relevant peer information
relevant_pairs = []

# Calculate the volatility and volume of each pair
for info in futures_exchange_info['symbols']:
    symbol = info['symbol']
    if symbol.endswith('USDT'):
        # Obtener datos históricos de precios en el último día
        start_time = int((datetime.now() - timedelta(days=1)).timestamp()) * 1000
        end_time = int(datetime.now().timestamp()) * 1000
        klines = client.futures_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_1HOUR, startTime=start_time,
                                       endTime=end_time)

        # Calculate the volume by adding the volume of each candle
        volume = sum(float(kline[5]) for kline in klines)

        # Get the percentage price change of the last price and the price from 24 hours ago
        last_price = float(klines[-1][4])
        prev_price = float(klines[0][4])
        price_change_percent = ((last_price - prev_price) / prev_price) * 100

        relevant_pairs.append({'symbol': symbol, 'volume': volume, 'price_change_percent': price_change_percent})

# Sort pairs by volume and volatility in descending order
relevant_pairs.sort(key=lambda x: (x['volume'], x['price_change_percent']), reverse=True)

# Get the 6 most relevant pairs
top_pairs = relevant_pairs[:6]

# Print the most relevant pairs
print("Los 6 pares más relevantes en función del volumen y la volatilidad:")
for pair in top_pairs:
    print(pair['symbol'], "- Volumen:", pair['volume'], "- Cambio porcentual de precio:", pair['price_change_percent'])
